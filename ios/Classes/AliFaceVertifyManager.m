// Autogenerated from Pigeon (v1.0.19), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "AliFaceVertifyManager.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface FaceVerResponse ()
+ (FaceVerResponse *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation FaceVerResponse
+ (instancetype)makeWithCode:(nullable NSNumber *)code
    retCode:(nullable NSNumber *)retCode
    reason:(nullable NSString *)reason
    retCodeSub:(nullable NSString *)retCodeSub
    retMessageSub:(nullable NSString *)retMessageSub
    extInfo:(nullable NSDictionary *)extInfo
    bizData:(nullable NSString *)bizData
    deviceToken:(nullable NSString *)deviceToken
    videoFilePath:(nullable NSString *)videoFilePath {
  FaceVerResponse* pigeonResult = [[FaceVerResponse alloc] init];
  pigeonResult.code = code;
  pigeonResult.retCode = retCode;
  pigeonResult.reason = reason;
  pigeonResult.retCodeSub = retCodeSub;
  pigeonResult.retMessageSub = retMessageSub;
  pigeonResult.extInfo = extInfo;
  pigeonResult.bizData = bizData;
  pigeonResult.deviceToken = deviceToken;
  pigeonResult.videoFilePath = videoFilePath;
  return pigeonResult;
}
+ (FaceVerResponse *)fromMap:(NSDictionary *)dict {
  FaceVerResponse *pigeonResult = [[FaceVerResponse alloc] init];
  pigeonResult.code = GetNullableObject(dict, @"code");
  pigeonResult.retCode = GetNullableObject(dict, @"retCode");
  pigeonResult.reason = GetNullableObject(dict, @"reason");
  pigeonResult.retCodeSub = GetNullableObject(dict, @"retCodeSub");
  pigeonResult.retMessageSub = GetNullableObject(dict, @"retMessageSub");
  pigeonResult.extInfo = GetNullableObject(dict, @"extInfo");
  pigeonResult.bizData = GetNullableObject(dict, @"bizData");
  pigeonResult.deviceToken = GetNullableObject(dict, @"deviceToken");
  pigeonResult.videoFilePath = GetNullableObject(dict, @"videoFilePath");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.code ? self.code : [NSNull null]), @"code", (self.retCode ? self.retCode : [NSNull null]), @"retCode", (self.reason ? self.reason : [NSNull null]), @"reason", (self.retCodeSub ? self.retCodeSub : [NSNull null]), @"retCodeSub", (self.retMessageSub ? self.retMessageSub : [NSNull null]), @"retMessageSub", (self.extInfo ? self.extInfo : [NSNull null]), @"extInfo", (self.bizData ? self.bizData : [NSNull null]), @"bizData", (self.deviceToken ? self.deviceToken : [NSNull null]), @"deviceToken", (self.videoFilePath ? self.videoFilePath : [NSNull null]), @"videoFilePath", nil];
}
@end

@interface AliFaceVertifyManagerCodecReader : FlutterStandardReader
@end
@implementation AliFaceVertifyManagerCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FaceVerResponse fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface AliFaceVertifyManagerCodecWriter : FlutterStandardWriter
@end
@implementation AliFaceVertifyManagerCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FaceVerResponse class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface AliFaceVertifyManagerCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation AliFaceVertifyManagerCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[AliFaceVertifyManagerCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[AliFaceVertifyManagerCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *AliFaceVertifyManagerGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    AliFaceVertifyManagerCodecReaderWriter *readerWriter = [[AliFaceVertifyManagerCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void AliFaceVertifyManagerSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<AliFaceVertifyManager> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AliFaceVertifyManager.init"
        binaryMessenger:binaryMessenger
        codec:AliFaceVertifyManagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initWithError:)], @"AliFaceVertifyManager api (%@) doesn't respond to @selector(initWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api initWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AliFaceVertifyManager.getMetaInfo"
        binaryMessenger:binaryMessenger
        codec:AliFaceVertifyManagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMetaInfoWithError:)], @"AliFaceVertifyManager api (%@) doesn't respond to @selector(getMetaInfoWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSDictionary *output = [api getMetaInfoWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AliFaceVertifyManager.openFaceCertify"
        binaryMessenger:binaryMessenger
        codec:AliFaceVertifyManagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(openFaceCertifyCertifyId:error:)], @"AliFaceVertifyManager api (%@) doesn't respond to @selector(openFaceCertifyCertifyId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_certifyId = args[0];
        FlutterError *error;
        [api openFaceCertifyCertifyId:arg_certifyId error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface AliFaceVertifyCallBackCodecReader : FlutterStandardReader
@end
@implementation AliFaceVertifyCallBackCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FaceVerResponse fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface AliFaceVertifyCallBackCodecWriter : FlutterStandardWriter
@end
@implementation AliFaceVertifyCallBackCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FaceVerResponse class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface AliFaceVertifyCallBackCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation AliFaceVertifyCallBackCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[AliFaceVertifyCallBackCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[AliFaceVertifyCallBackCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *AliFaceVertifyCallBackGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    AliFaceVertifyCallBackCodecReaderWriter *readerWriter = [[AliFaceVertifyCallBackCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


@interface AliFaceVertifyCallBack ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation AliFaceVertifyCallBack

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)certifyCompletionResponse:(FaceVerResponse *)arg_response completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.AliFaceVertifyCallBack.certifyCompletion"
      binaryMessenger:self.binaryMessenger
      codec:AliFaceVertifyCallBackGetCodec()];
  [channel sendMessage:@[arg_response] reply:^(id reply) {
    completion(nil);
  }];
}
@end
