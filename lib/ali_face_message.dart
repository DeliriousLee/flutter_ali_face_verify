// Autogenerated from Pigeon (v1.0.19), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class FaceVerResponse {
  FaceVerResponse({
    this.code,
    this.retCode,
    this.reason,
    this.retCodeSub,
    this.retMessageSub,
    this.extInfo,
    this.bizData,
    this.deviceToken,
    this.videoFilePath,
  });

  int? code;
  int? retCode;
  String? reason;
  String? retCodeSub;
  String? retMessageSub;
  Map<Object?, Object?>? extInfo;
  String? bizData;
  String? deviceToken;
  String? videoFilePath;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['code'] = code;
    pigeonMap['retCode'] = retCode;
    pigeonMap['reason'] = reason;
    pigeonMap['retCodeSub'] = retCodeSub;
    pigeonMap['retMessageSub'] = retMessageSub;
    pigeonMap['extInfo'] = extInfo;
    pigeonMap['bizData'] = bizData;
    pigeonMap['deviceToken'] = deviceToken;
    pigeonMap['videoFilePath'] = videoFilePath;
    return pigeonMap;
  }

  static FaceVerResponse decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return FaceVerResponse(
      code: pigeonMap['code'] as int?,
      retCode: pigeonMap['retCode'] as int?,
      reason: pigeonMap['reason'] as String?,
      retCodeSub: pigeonMap['retCodeSub'] as String?,
      retMessageSub: pigeonMap['retMessageSub'] as String?,
      extInfo: pigeonMap['extInfo'] as Map<Object?, Object?>?,
      bizData: pigeonMap['bizData'] as String?,
      deviceToken: pigeonMap['deviceToken'] as String?,
      videoFilePath: pigeonMap['videoFilePath'] as String?,
    );
  }
}

class _AliFaceVertifyManagerCodec extends StandardMessageCodec {
  const _AliFaceVertifyManagerCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is FaceVerResponse) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return FaceVerResponse.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class AliFaceVertifyManager {
  /// Constructor for [AliFaceVertifyManager].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  AliFaceVertifyManager({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _AliFaceVertifyManagerCodec();

  Future<void> init() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AliFaceVertifyManager.init', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<Map<Object?, Object?>> getMetaInfo() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AliFaceVertifyManager.getMetaInfo', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as Map<Object?, Object?>?)!;
    }
  }

  Future<void> openFaceCertify(String arg_certifyId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AliFaceVertifyManager.openFaceCertify', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[arg_certifyId]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}

class _AliFaceVertifyCallBackCodec extends StandardMessageCodec {
  const _AliFaceVertifyCallBackCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is FaceVerResponse) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return FaceVerResponse.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class AliFaceVertifyCallBack {
  static const MessageCodec<Object?> codec = _AliFaceVertifyCallBackCodec();

  void certifyCompletion(FaceVerResponse response);
  static void setup(AliFaceVertifyCallBack? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.AliFaceVertifyCallBack.certifyCompletion', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.AliFaceVertifyCallBack.certifyCompletion was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final FaceVerResponse? arg_response = (args[0] as FaceVerResponse?);
          assert(arg_response != null, 'Argument for dev.flutter.pigeon.AliFaceVertifyCallBack.certifyCompletion was null, expected non-null FaceVerResponse.');
          api.certifyCompletion(arg_response!);
          return;
        });
      }
    }
  }
}
